<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.second.space.mapper.AdminXMLMapper">
	<!-- 배너 검색 조건문 -->
    <sql id="bannerSearch">
        <trim prefix="AND (" suffix=")" prefixOverrides="OR">
            <foreach collection="typeArr" item="type">
                <trim prefix="OR">
                    <choose>
                    	<when test="type == 'A'.toString()">
                            na_title like '%'||LOWER(#{keyword})||'%' OR na_title like '%'||UPPER(#{keyword})||'%'
                            OR na_name like '%'||LOWER(#{keyword})||'%' OR na_name like '%'||UPPER(#{keyword})||'%'
                            OR na_url like '%'||LOWER(#{keyword})||'%' OR na_url like '%'||LOWER(#{keyword})||'%'
                        </when>
                        <when test="type == 'B'.toString()">
                            na_title like '%'||LOWER(#{keyword})||'%' OR na_title like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'C'.toString()">
                            na_name like '%'||LOWER(#{keyword})||'%' OR na_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>

    <!-- 공지사항 검색 조건문 -->
    <sql id="noticeSearch">
        <trim prefix="AND (" suffix=")" prefixOverrides="OR">
            <foreach collection="typeArr" item="type">
                <trim prefix="OR">
                    <choose>
                    	<when test="type == 'A'.toString()">
							notice_title like '%'||LOWER(#{keyword})||'%' OR notice_title like '%'||UPPER(#{keyword})||'%'
							OR noc_name like '%'||LOWER(#{keyword})||'%' OR noc_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'B'.toString()">
                            notice_title like '%'||LOWER(#{keyword})||'%' OR notice_title like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'C'.toString()">
                            noc_name like '%'||LOWER(#{keyword})||'%' OR noc_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    
   <!-- 회원관리 검색 조건문 -->
    <sql id="userSearch">
        <trim prefix="AND (" suffix=")" prefixOverrides="OR">
            <foreach collection="typeArr" item="type">
                <trim prefix="OR">
                    <choose>
                    	<when test="type == 'A'.toString()">
							login_id like '%'||LOWER(#{keyword})||'%' OR login_id like '%'||UPPER(#{keyword})||'%'
							OR user_nickname like '%'||LOWER(#{keyword})||'%' OR user_nickname like '%'||UPPER(#{keyword})||'%'
							OR user_address like '%'||LOWER(#{keyword})||'%' OR user_address like '%'||UPPER(#{keyword})||'%'
							OR user_phone like '%'||LOWER(#{keyword})||'%' OR user_phone like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'B'.toString()">
                            login_id like '%'||LOWER(#{keyword})||'%' OR login_id like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'C'.toString()">
                            user_nickname like '%'||LOWER(#{keyword})||'%' OR user_nickname like '%'||UPPER(#{keyword})||'%'
                        </when>
						<when test="type == 'D'.toString()">
						   user_address like '%'||LOWER(#{keyword})||'%' OR user_address like '%'||UPPER(#{keyword})||'%'
						</when>
						<when test="type == 'E'.toString()">
						   user_phone like '%'||LOWER(#{keyword})||'%' OR user_phone like '%'||UPPER(#{keyword})||'%'
						</when>
						<when test="type == 'F'.toString()">
						   login_id like '%'||LOWER(#{keyword})||'%' OR login_id like '%'||UPPER(#{keyword})||'%'
						</when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    
    <!-- 문의사항 검색 조건문 -->
    <sql id="contactUsSearch">
        <trim prefix="AND (" suffix=")" prefixOverrides="OR">
            <foreach collection="typeArr" item="type">
                <trim prefix="OR">
                    <choose>
                    	<when test="type == 'A'.toString()">
							cs_name like '%'||LOWER(#{keyword})||'%' OR cs_name like '%'||UPPER(#{keyword})||'%'
							OR cu_title like '%'||LOWER(#{keyword})||'%' OR cu_title like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'B'.toString()">
                            cs_name like '%'||LOWER(#{keyword})||'%' OR cs_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'C'.toString()">
                            cu_title like '%'||LOWER(#{keyword})||'%' OR cu_title like '%'||UPPER(#{keyword})||'%'
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    
    <!-- 장터 게시글 검색 조건문 -->
    <sql id="saleSearch">
        <trim prefix="AND (" suffix=")" prefixOverrides="OR">
            <foreach collection="typeArr" item="type">
                <trim prefix="OR">
                    <choose>
                    	<when test="type == 'A'.toString()">
							login_id like '%'||LOWER(#{keyword})||'%' OR login_id like '%'||UPPER(#{keyword})||'%'
							OR user_nickname like '%'||LOWER(#{keyword})||'%' OR user_nickname like '%'||UPPER(#{keyword})||'%'
							OR board_title like '%'||LOWER(#{keyword})||'%' OR board_title like '%'||UPPER(#{keyword})||'%'
							OR p_category_name like '%'||LOWER(#{keyword})||'%' OR p_category_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'B'.toString()">
                            login_id like '%'||LOWER(#{keyword})||'%' OR login_id like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'C'.toString()">
                            user_nickname like '%'||LOWER(#{keyword})||'%' OR user_nickname like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'D'.toString()">
                            p_category_name like '%'||LOWER(#{keyword})||'%' OR p_category_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'E'.toString()">
                            board_title like '%'||LOWER(#{keyword})||'%' OR board_title like '%'||UPPER(#{keyword})||'%'
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    
    <!-- 커뮤니티 게시글 검색 조건문 -->
    <sql id="communitySearch">
        <trim prefix="AND (" suffix=")" prefixOverrides="OR">
            <foreach collection="typeArr" item="type">
                <trim prefix="OR">
                    <choose>
                    	<when test="type == 'A'.toString()">
							login_id like '%'||LOWER(#{keyword})||'%' OR login_id like '%'||UPPER(#{keyword})||'%'
							OR user_nickname like '%'||LOWER(#{keyword})||'%' OR user_nickname like '%'||UPPER(#{keyword})||'%'
							OR c_board_title like '%'||LOWER(#{keyword})||'%' OR c_board_title like '%'||UPPER(#{keyword})||'%'
							OR c_category_name like '%'||LOWER(#{keyword})||'%' OR c_category_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'B'.toString()">
                            login_id like '%'||LOWER(#{keyword})||'%' OR login_id like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'C'.toString()">
                            user_nickname like '%'||LOWER(#{keyword})||'%' OR user_nickname like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'D'.toString()">
                            c_category_name like '%'||LOWER(#{keyword})||'%' OR c_category_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'E'.toString()">
                           c_board_title like '%'||LOWER(#{keyword})||'%' OR c_board_title like '%'||UPPER(#{keyword})||'%'
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    
    <!-- 관리자공지 게시글 검색 조건문 -->
    <sql id="adminSearch">
        <trim prefix="AND (" suffix=")" prefixOverrides="OR">
            <foreach collection="typeArr" item="type">
                <trim prefix="OR">
                    <choose>
                    	<when test="type == 'A'.toString()">
							ac_name like '%'||LOWER(#{keyword})||'%' OR ac_name like '%'||UPPER(#{keyword})||'%'
							OR ae_name like '%'||LOWER(#{keyword})||'%' OR ae_name like '%'||UPPER(#{keyword})||'%'
							OR notice_admin_title like '%'||LOWER(#{keyword})||'%' OR notice_admin_title like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'B'.toString()">
                            ac_name like '%'||LOWER(#{keyword})||'%' OR ac_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'C'.toString()">
                            ae_name like '%'||LOWER(#{keyword})||'%' OR ae_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'D'.toString()">
                            notice_admin_title like '%'||LOWER(#{keyword})||'%' OR notice_admin_title like '%'||UPPER(#{keyword})||'%'
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    
    <!-- 신고 관리 게시물, 댓글 검색 조건문 -->
    <sql id="notifySearch">
        <trim prefix="AND (" suffix=")" prefixOverrides="OR">
            <foreach collection="typeArr" item="type">
                <trim prefix="OR">
                    <choose>
                    	<when test="type == 'A'.toString()">
							reported like '%'||LOWER(#{keyword})||'%' OR reported like '%'||UPPER(#{keyword})||'%'
							OR reporter like '%'||LOWER(#{keyword})||'%' OR reporter like '%'||UPPER(#{keyword})||'%'
							OR nfc_name like '%'||LOWER(#{keyword})||'%' OR nfc_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'B'.toString()">
                            reported like '%'||LOWER(#{keyword})||'%' OR reported like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'C'.toString()">
                            reporter like '%'||LOWER(#{keyword})||'%' OR reporter like '%'||UPPER(#{keyword})||'%'
                        </when>
                        <when test="type == 'D'.toString()">
                            nfc_name like '%'||LOWER(#{keyword})||'%' OR nfc_name like '%'||UPPER(#{keyword})||'%'
                        </when>
                    </choose>
                </trim>
            </foreach>
        </trim>
    </sql>
    
	<!-- 홈 - 신고 관리 접수 갯수 -->
	<select id="getNotificationCount" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_board /*WHERE n_notify_date BETWEEN sysdate-7 AND sysdate*/
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt /*WHERE nc_notify_date BETWEEN sysdate-7 AND sysdate*/
		UNION ALL
		SELECT COUNT(*) FROM notification_review /*WHERE nr_notify_date BETWEEN sysdate-7 AND sysdate*/
	</select>
	
	<!-- 홈 - 통계 갯수 -->
	<select id="getStatsCount" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM user_
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE user_delete = 'Y'
		UNION ALL
		SELECT COUNT(*) FROM board
		UNION ALL
		SELECT COUNT(*) FROM count_user_date
	</select>
	
	<!-- 홈 - 배너 관리 리스트 -->
	<select id="getNotificationAdList" resultType="com.second.space.admin.model.Notification_adDTO">
		SELECT * FROM notification_ad WHERE ROWNUM BETWEEN 1 AND 4 ORDER BY na_end_date
	</select>

	<resultMap type="com.second.space.admin.model.Admin_categoryDTO" id="Admin_categoryDTO">
	    <result column="ac_id" property="ac_id"/>
	    <result column="ac_code" property="ac_code"/>
	    <result column="ac_name" property="ac_name"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.Admin_empDTO" id="Admin_empDTO">
	    <result column="ae_id" property="ae_id"/>
	    <result column="ae_name" property="ae_name"/>
	    <result column="ae_class" property="ae_class"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.Notice_adminDTO" id="Notice_adminDTO">
 		<result column="notice_admin_id" property="notice_admin_id"/>
 		<result column="notice_admin_title" property="notice_admin_title"/>
 		<result column="notice_admin_content" property="notice_admin_content"/>
 		<result column="user_id" property="user_id"/>
 		<result column="notice_admin_date" property="notice_admin_date"/>
 		<result column="notice_admin_img" property="notice_admin_img"/>
 		<result column="notice_admin_view" property="notice_admin_view"/>
 		<result column="ac_id" property="ac_id"/>
 		<result column="ae_id" property="ae_id"/>
 		<collection property="acDTO" resultMap="Admin_categoryDTO"/>
 		<collection property="aeDTO" resultMap="Admin_empDTO"/>
 	</resultMap>

	<resultMap type="com.second.space.admin.model.Notice_categoryDTO" id="Notice_categoryDTO">
	    <result column="noc_id" property="noc_id"/>
	    <result column="noc_name" property="noc_name"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.NoticeDTO" id="NoticeDTO">
		<result column="rn" property="rn"/>
 		<result column="notice_id" property="notice_id"/>
 		<result column="notice_title" property="notice_title"/>
 		<result column="notice_content" property="notice_content"/>
 		<result column="user_id" property="user_id"/>
 		<result column="notice_date" property="notice_date"/>
 		<result column="notice_img" property="notice_img"/>
 		<result column="notice_delete" property="notice_delete"/>
 		<result column="notice_view" property="notice_view"/>
 		<collection property="ncDTO" resultMap="Notice_categoryDTO"/>
 	</resultMap>

	<resultMap type="com.second.space.admin.model.Login_id_listDTO" id="Login_id_listDTO">
	    <result column="user_login_id" property="user_login_id"/>
	    <result column="login_id" property="login_id"/>
	    <result column="login_id_1" property="login_id_1"/>
	    <result column="login_id_2" property="login_id_2"/>
	    <result column="user_login_type" property="user_login_type"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.Delete_accountDTO" id="Delete_accountDTO">
	    <result column="delete_id" property="delete_id"/>
	    <result column="user_id" property="user_id"/>
	    <result column="delete_reason" property="delete_reason"/>
	    <result column="delete_date" property="delete_date"/>
	</resultMap>
	
	<resultMap type="com.second.space.board.model.PaymentsCategoryDTO" id="PaymentsCategoryDTO">
	    <result column="p_category_id" property="p_category_id"/>
	    <result column="p_category_name" property="p_category_name"/>
	</resultMap>
	
	<resultMap type="com.second.space.community.model.CommunityCategoryDTO" id="CommunityCategoryDTO">
	    <result column="c_category_id" property="c_category_id"/>
	    <result column="c_category_name" property="c_category_name"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.A_boardDTO" id="A_boardDTO">
	    <result column="board_id" property="board_id"/>
	    <result column="board_title" property="board_title"/>
	    <result column="board_content" property="board_content"/>
	    <result column="board_price" property="board_price"/>
	    <result column="board_trade_type" property="board_trade_type"/>
	    <result column="user_id" property="user_id"/>
	    <result column="board_view" property="board_view"/>
	    <result column="board_date" property="board_date"/>
	    <result column="board_delete" property="board_delete"/>
	    <result column="board_state" property="board_state"/>
	    <result column="auction_state" property="auction_state"/>
	    <result column="board_hidden" property="board_hidden"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.A_Community_boardDTO" id="A_Community_boardDTO">
	    <result column="c_board_id" property="c_board_id"/>
	    <result column="c_board_title" property="c_board_title"/>
	    <result column="c_category_id" property="c_category_id"/>
	    <result column="c_board_content" property="c_board_content"/>
	    <result column="c_board_img" property="c_board_img"/>
	    <result column="user_id" property="user_id"/>
	    <result column="c_board_view" property="c_board_view"/>
	    <result column="c_board_date" property="c_board_date"/>
	    <result column="c_board_delete" property="c_board_delete"/>
	    <result column="c_board_hidden" property="c_board_hidden"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.Cs_categoryDTO" id="Cs_categoryDTO">
	    <result column="cs_category_id" property="cs_category_id"/>
	    <result column="cs_name" property="cs_name"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.Contact_usDTO" id="Contact_usDTO">
		<result column="rn" property="rn"/>
	    <result column="cu_id" property="cu_id"/>
	    <result column="cs_category_id" property="cs_category_id"/>
	    <result column="user_id" property="user_id"/>
	    <result column="cu_title" property="cu_title"/>
	    <result column="cu_content" property="cu_content"/>
	    <result column="cu_img" property="cu_img"/>
	    <result column="cu_date" property="cu_date"/>
	    <result column="cu_state" property="cu_state"/>
	    <result column="c_board_delete" property="c_board_delete"/>
	    <result column="c_board_hidden" property="c_board_hidden"/>
	    <collection property="cscDTO" resultMap="Cs_categoryDTO"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.Notification_boardDTO" id="Notification_boardDTO">
	    <result column="n_id" property="n_id"/>
	    <result column="board_id" property="board_id"/>
	    <result column="c_board_id" property="c_board_id"/>
	    <result column="n_handling" property="n_handling"/>
	    <result column="user_id" property="user_id"/>
	    <result column="n_notify_date" property="n_notify_date"/>
	    <result column="nfc_id" property="nfc_id"/>
	    <result column="n_content" property="n_content"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.Notification_categoryDTO" id="Notification_categoryDTO">
	    <result column="nfc_id" property="nfc_id"/>
	    <result column="nfc_name" property="nfc_name"/>
	</resultMap>
	
	<resultMap type="com.second.space.admin.model.UserDTO" id="UserDTO">
		<result column="rn" property="rn"/>
 		<result column="user_id" property="user_id"/>
 		<result column="user_phone" property="user_phone"/>
 		<result column="user_password" property="user_password"/>
 		<result column="user_admin" property="user_admin"/>
 		<result column="user_login_id" property="user_login_id"/>
 		<result column="user_nickname" property="user_nickname"/>
 		<result column="user_address" property="user_address"/>
 		<result column="user_gender" property="user_gender"/>
 		<result column="user_name" property="user_name"/>
 		<result column="user_ban" property="user_ban"/>
 		<result column="user_join_date" property="user_join_date"/>
 		<result column="user_profile" property="user_profile"/>
 		<result column="user_following" property="user_following"/>
 		<result column="user_followed" property="user_followed"/>
 		<result column="user_check_email" property="user_check_email"/>
 		<result column="user_public_profile" property="user_public_profile"/>
 		<result column="user_delete" property="user_delete"/>
 		<result column="user_reported" property="user_reported"/>
 		<collection property="lilDTO" resultMap="Login_id_listDTO"/>
 		<collection property="daDTO" resultMap="Delete_accountDTO"/>
 		<collection property="pcDTO" resultMap="PaymentsCategoryDTO"/>
 		<collection property="abDTO" resultMap="A_boardDTO"/>
 		<collection property="acbDTO" resultMap="A_Community_boardDTO"/>
 		<collection property="ccDTO" resultMap="CommunityCategoryDTO"/>
 		<collection property="naDTO" resultMap="Notice_adminDTO"/>
 	</resultMap>

	<!-- 홈 - 어드민 안내 리스트 -->
	<select id="getNoticeAdminList" resultMap="Notice_adminDTO">
		SELECT * FROM notice_admin INNER JOIN admin_category USING(ac_id) INNER JOIN admin_emp USING(ae_id)
	</select>
	
	<!-- 배너관리 - 목록 리스트 -->
	<select id="getAllNotificationAdList" resultType="com.second.space.admin.model.Notification_adDTO">
	        SELECT
	        	rn, na_id, na_title, na_name, na_url, na_start_date, na_end_date
	        FROM(
		        SELECT
		        	ROWNUM rn, na_id, na_title, na_name, na_url, na_start_date, na_end_date
		        FROM(
		        	SELECT
		        		na_id, na_title, na_name, na_url, na_start_date, na_end_date
					FROM
						notification_ad
					<if test="keyword != null">
	                    WHERE na_id > 0 <include refid="bannerSearch"></include> 
	                </if>
					ORDER BY
						na_end_date DESC
				)
		<![CDATA[
				WHERE
					na_end_date > sysdate-1
	        )
	        WHERE
	        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
    	]]>
	</select>
	
	<!-- 배너관리 - 목록 전체 갯수 -->
	<select id="getNotificationAdTotal" resultType="int">
		<![CDATA[
			SELECT COUNT(*) FROM notification_ad WHERE na_end_date > sysdate-1
		]]>
			<if test="keyword != null">
	            <include refid="bannerSearch"></include>
	        </if>
	</select>
	
	<!-- 배너관리 - 신규 등록 -->
	<insert id="createNotificationAd">
		<selectKey keyProperty="na_id" order="BEFORE" resultType="int">
			SELECT NOTIFICATION_AD_NA_ID_SEQ.nextval FROM DUAL
		</selectKey>
		INSERT INTO notification_ad VALUES(#{na_id}, #{na_start_date}, #{na_end_date}, #{na_img}, 'Y', #{na_url}, '1', #{na_title}, #{na_name})
	</insert>
	
	<!-- 배너관리 - 상세 정보 -->
	<select id="getNotificationAdDetail" resultType="com.second.space.admin.model.Notification_adDTO">
		SELECT * FROM notification_ad WHERE na_id = #{na_id}
	</select>
	
	<!-- 배너관리 - 수정 -->
	<update id="updateBanner">
		UPDATE
			notification_ad
		SET
			na_start_date = #{na_start_date}, na_end_date = #{na_end_date}, na_img = #{na_img},
			na_url = #{na_url}, na_title = #{na_title}, na_name = #{na_name}
		WHERE
			na_id = #{na_id}
	</update>
	
	<!-- 배너관리 - 삭제 -->
	<delete id="deleteBanner">
		DELETE FROM notification_ad WHERE na_id = #{na_id}
	</delete>
	
	<!-- 배너관리 - 마감 목록 리스트 -->
	<select id="getAllBannerEndDateList" resultType="com.second.space.admin.model.Notification_adDTO">
	        SELECT
	        	rn, na_id, na_title, na_name, na_url, na_start_date, na_end_date
	        FROM(
		        SELECT
		        	ROWNUM rn, na_id, na_title, na_name, na_url, na_start_date, na_end_date
		        FROM(
		        	SELECT
		        		na_id, na_title, na_name, na_url, na_start_date, na_end_date
					FROM
						notification_ad
					<if test="keyword != null">
			            WHERE na_id > 0 <include refid="bannerSearch"></include>
			        </if>
					ORDER BY
						na_end_date DESC
				)
			<![CDATA[
		        WHERE
		        	na_end_date < sysdate-1
	        )
	        WHERE
	        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount} 
        	]]>
	</select>
	
	<!-- 배너관리 - 마감 목록 전체 갯수 -->
	<select id="getBannerEndDateTotal" resultType="int">
		<![CDATA[
			SELECT COUNT(*) FROM notification_ad WHERE na_end_date < sysdate-1
		]]>
			<if test="keyword != null">
	            <include refid="bannerSearch"></include>
	        </if>
	</select>

	<!-- 공지사항 - 목록 리스트 -->
	<select id="getAllNoticeList" resultMap="NoticeDTO">
	        SELECT
	        	rn, notice_id, notice_title, notice_content, user_id, notice_date, notice_img, notice_delete, notice_view, noc_id, noc_name
	        FROM(
		        SELECT
		        	ROWNUM rn, notice_id, notice_title, notice_content, user_id, notice_date, notice_img, notice_delete, notice_view, noc_id, noc_name
		        FROM(
		        	SELECT
		        		n.notice_id, n.notice_title, n.notice_content, n.user_id, n.notice_date, n.notice_img, n.notice_delete, n.notice_view, nc.noc_id, nc.noc_name
					FROM
						notice n,
						notice_category nc
					WHERE
						n.noc_id = nc.noc_id
						<if test="keyword != null">
			                <include refid="noticeSearch"></include> 
			            </if>
					ORDER BY
						n.notice_date DESC
				)
	        )
	        <![CDATA[
	        WHERE
	        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
	        ]]>
	</select>
	
	<!-- 공지사항 - 목록 전체 갯수 -->
	<select id="getNoticeTotal" resultType="int">
		SELECT COUNT(*) FROM notice INNER JOIN notice_category USING(noc_id)
		<if test="keyword != null">
            WHERE notice_id > 0 <include refid="noticeSearch"></include> 
        </if>
	</select>
	
	<!-- 공지사항 - 상세 정보 -->
	<select id="getNoticeDetail" resultMap="NoticeDTO">
		SELECT * FROM notice INNER JOIN notice_category USING(noc_id) WHERE notice_id = #{notice_id}
	</select>
	
	<!-- 공지사항 - 카테고리 리스트 -->
	<select id="getNoticeCategory" resultType="com.second.space.admin.model.Notice_categoryDTO">
		SELECT * FROM notice_category
	</select>
	
	<!-- 공지사항 - 신규 등록 -->
	<insert id="insertNotice">
		INSERT INTO
			notice(notice_id, notice_title, notice_content, noc_id)
		VALUES
			(NOTICE_NOTICE_ID_SEQ.nextval, #{notice_title}, #{notice_content}, #{noc_id})
	</insert>
	
	<!-- 공지사항 - 수정 -->
	<update id="updateNotice">
		UPDATE notice SET notice_title = #{notice_title}, notice_content = #{notice_content}, noc_id = #{noc_id} WHERE notice_id = #{notice_id}
	</update>
	
	<!-- 공지사항 - 삭제 -->
	<delete id="deleteNotice">
		DELETE FROM notice WHERE notice_id = #{notice_id}
	</delete>

 	<!-- 회원 관리 - 목록 리스트 -->
	<select id="getAllUserList" resultMap="UserDTO">
		SELECT
			rn, user_id, login_id, user_nickname, user_join_date, user_address, user_phone
		FROM(
	        SELECT
	        	ROWNUM rn, user_id, login_id, user_nickname, user_join_date, user_address, user_phone
	        FROM(
	        	SELECT
	        		u.user_id, lil.login_id, u.user_nickname, u.user_join_date, u.user_address, u.user_phone
				FROM
					user_ u,
					login_id_list lil
				WHERE
					u.user_admin = 'N'
					AND u.user_delete = 'N'
					AND u.user_login_id = lil.user_login_id
					<if test="keyword != null">
		                <include refid="userSearch"></include> 
		            </if>
				ORDER BY
					u.user_join_date DESC
			)
		)
		<![CDATA[
        WHERE
        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
   		]]>
	</select>
	
	<!-- 회원 관리 - 목록 전체 갯수 -->
	<select id="getUserTotal" resultType="int">
		SELECT COUNT(*) FROM user_ INNER JOIN login_id_list USING(user_login_id)
		<if test="keyword != null">
            WHERE user_id > 0 <include refid="userSearch"></include> 
        </if>
	</select>
	
	<!-- 회원 관리 - 탈퇴 회원 리스트 -->
	<select id="getAllWithdrawalList" resultMap="UserDTO">
			SELECT
				rn, user_id, login_id, user_nickname, user_join_date, delete_reason, delete_date
			FROM(
		        SELECT
		        	ROWNUM rn, user_id, login_id, user_nickname, user_join_date, delete_reason, delete_date
		        FROM(
		        	SELECT
		        		u.user_id, lil.login_id, u.user_nickname, u.user_join_date, da.delete_reason, da.delete_date
					FROM
						user_ u,
						login_id_list lil,
						delete_account da
					WHERE
						u.user_admin = 'N'
						AND u.user_login_id = lil.user_login_id
						AND u.user_id = da.user_id
						<if test="keyword != null">
			                <include refid="userSearch"></include> 
			            </if>
					ORDER BY
						da.delete_date DESC
				)
			)
	        <![CDATA[
	        WHERE
	        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
	   		]]>
	</select>
	
	<!-- 회원 관리 - 탈퇴 회원 전체 갯수 -->
	<select id="getWithdrawalTotal" resultType="int">
		SELECT COUNT(*) FROM user_ INNER JOIN login_id_list USING(user_login_id) INNER JOIN delete_account USING(user_id)
		<if test="keyword != null">
            WHERE user_id > 0 <include refid="userSearch"></include> 
        </if>
	</select>

	<!-- 게시물 관리 - 장터 게시물 리스트 -->
	<select id="getAllSaleList" resultMap="UserDTO">
	        SELECT
	        	rn, user_id, board_id, login_id, user_nickname, board_title, board_date, board_hidden, p_category_name
	        FROM(
		        SELECT
		        	ROWNUM rn, user_id, board_id, login_id, user_nickname, board_title, board_date, board_hidden, p_category_name
		        FROM(
		        	SELECT
		        		b.user_id, b.board_id, lil.login_id, u.user_nickname, b.board_title, b.board_date, b.board_hidden, p.p_category_name
					FROM
						user_ u,
						login_id_list lil,
						board b,
						payments_category p
					WHERE
						u.user_admin = 'N'
						AND u.user_login_id = lil.user_login_id
						AND u.user_id = b.user_id 
						AND b.p_category_id = p.p_category_id
						<if test="keyword != null">
			                <include refid="saleSearch"></include> 
			            </if>
					ORDER BY
						b.board_date DESC
				)
	        )
			<![CDATA[
	        WHERE
	        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
   			]]>
	</select>
	
	<!-- 게시물 관리 - 장터 게시물 갯수 -->
	<select id="getSaleTotal" resultType="int">
		SELECT
       		COUNT(*)
		FROM
			user_ u,
			login_id_list lil,
			board b,
			payments_category p
		WHERE
			u.user_admin = 'N'
			AND u.user_login_id = lil.user_login_id
			AND u.user_id = b.user_id 
			AND b.p_category_id = p.p_category_id
			<if test="keyword != null">
                <include refid="saleSearch"></include> 
            </if>
	</select>
	
	<!-- 게시물 관리 - 커뮤니티 게시물 리스트 -->
	<select id="getAllCommunityList" resultMap="UserDTO">
        	SELECT
        		rn, user_id, c_board_id, login_id, user_nickname, c_board_title, c_board_date, c_board_hidden, c_category_name
        	FROM(
	        	SELECT
		        	ROWNUM rn, user_id, c_board_id, login_id, user_nickname, c_board_title, c_board_date, c_board_hidden, c_category_name
		        FROM(
		        	SELECT
		        		b.user_id, b.c_board_id, lil.login_id, u.user_nickname, b.c_board_title, b.c_board_date, b.c_board_hidden, p.c_category_name
					FROM
						user_ u,
						login_id_list lil,
						community_board b,
						community_category p
					WHERE
						u.user_admin = 'N'
						AND u.user_login_id = lil.user_login_id
						AND u.user_id = b.user_id 
						AND b.c_category_id = p.c_category_id
						<if test="keyword != null">
			                <include refid="communitySearch"></include> 
			            </if>
					ORDER BY
						b.c_board_date DESC
				)
        	)
		<![CDATA[
        WHERE
        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
    	]]>
	</select>
	
	<!-- 게시물 관리 - 커뮤니티 게시물 갯수 -->
	<select id="getCommunityTotal" resultType="int">
		SELECT
       		COUNT(*)
		FROM
			user_ u,
			login_id_list lil,
			community_board b,
			community_category p
		WHERE
			u.user_admin = 'N'
			AND u.user_login_id = lil.user_login_id
			AND u.user_id = b.user_id 
			AND b.c_category_id = p.c_category_id
			<if test="keyword != null">
                <include refid="communitySearch"></include> 
            </if>
	</select>
	
	<!-- 게시물 관리 - 장터 게시물 숨김 처리 -->
	<update id="updateHidden">
		UPDATE board SET board_hidden = #{board_hidden} WHERE board_id = #{board_id}
	</update>
	
	<!-- 관리자 공지 - 목록 리스트 -->
	<select id="getAllNoticeAdminList" resultMap="UserDTO">
        SELECT
        	rn, user_id, ac_code, ac_name, ae_name, ae_class, notice_admin_id, notice_admin_title, notice_admin_date
        FROM(
	        SELECT
	        	ROWNUM rn, user_id, ac_code, ac_name, ae_name, ae_class, notice_admin_id, notice_admin_title, notice_admin_date
	        FROM(
	        	SELECT
	        		na.user_id, ac.ac_code, ac.ac_name, ae.ae_name, ae.ae_class, na.notice_admin_id, na.notice_admin_title, na.notice_admin_date
				FROM
					user_ u,
			        admin_category ac,
			        admin_emp ae,
			        notice_admin na,
			        login_id_list lil
				WHERE
					u.user_id=na.user_id
			        AND na.ac_id=ac.ac_id
			        AND ae.ae_id=na.ae_id
			        AND u.user_login_id=lil.user_login_id
			        <if test="keyword != null">
		                <include refid="adminSearch"></include> 
		            </if>
				ORDER BY
					na.notice_admin_date DESC
			)
        )
		<![CDATA[
		WHERE
			rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
    	]]>
	</select>
	
	<!-- 관리자 공지 - 목록 갯수 -->
	<select id="getNoticeAdminTotal" resultType="int">
		SELECT
       		COUNT(*)
		FROM
			user_ u,
	        admin_category ac,
	        admin_emp ae,
	        notice_admin na,
	        login_id_list lil
		WHERE
			u.user_id=na.user_id
	        AND na.ac_id=ac.ac_id
	        AND ae.ae_id=na.ae_id
	        AND u.user_login_id=lil.user_login_id
	        <if test="keyword != null">
                <include refid="adminSearch"></include> 
            </if>
	</select>
	
	<!-- 문의사항 - 1:1 문의 리스트 -->
	<select id="getAllContactUsList" resultMap="Contact_usDTO">
	        SELECT
	        	rn, cs_name, cu_id, cu_title, cu_date
	        FROM(
		        SELECT
		        	ROWNUM rn, cs_name, cu_id, cu_title, cu_date
		        FROM(
		        	SELECT
		        		csc.cs_name, cu.cu_id, cu.cu_title, cu.cu_date
					FROM
						user_ u,
				        contact_us cu,
				        cs_category csc
					WHERE
						cu.user_id=u.user_id
	        			AND cu.cs_category_id=csc.cs_category_id
	        			<if test="keyword != null">
			                <include refid="contactUsSearch"></include> 
			            </if>
	        		ORDER BY
	        			cu_date DESC
				)
	        )
	        <![CDATA[
	        WHERE
	        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
	        ]]>
	</select>
	
	<!-- 문의사항 - 1:1 문의 리스트 갯수 -->
	<select id="getContactUsTotal" resultType="int">
		SELECT COUNT(*) FROM contact_us INNER JOIN cs_category USING(cs_category_id)
		<if test="keyword != null">
            WHERE cu_id > 0 <include refid="contactUsSearch"></include> 
        </if>
	</select>
	
	<!-- 통계 - 일일 라벨 -->
	<select id="getDailyLabel" resultType="java.lang.String">
		<![CDATA[
			SELECT
	    		TO_CHAR(TRUNC(sysdate, 'DD'), 'DD') - 6 + LEVEL - 1
			FROM
			    dual 
			CONNECT BY LEVEL <= (TO_CHAR(TRUNC(sysdate, 'DD'), 'DD') + 6 - TO_CHAR(TRUNC(sysdate, 'DD'), 'DD') + 1)
		]]>
	</select>
	
	<!-- 통계 - 주별 라벨 -->
	<select id="getWeeklyLabel" resultType="java.lang.String">
		SELECT TO_CHAR(sysdate-21, 'MM/DD') FROM dual
		UNION ALL
		SELECT TO_CHAR(sysdate-14, 'MM/DD') FROM dual
		UNION ALL
		SELECT TO_CHAR(sysdate-7, 'MM/DD') FROM dual
		UNION ALL
		SELECT TO_CHAR(sysdate, 'MM/DD') FROM dual
	</select>
	
	<!-- 통계 - 월별 라벨 -->
	<select id="getMonthlyLabel" resultType="java.lang.String">
		SELECT TO_CHAR(ADD_MONTHS(TRUNC(sysdate, 'MM'), -3), 'MM') FROM dual
		UNION ALL
		SELECT TO_CHAR(ADD_MONTHS(TRUNC(sysdate, 'MM'), -2), 'MM') FROM dual
		UNION ALL
		SELECT TO_CHAR(ADD_MONTHS(TRUNC(sysdate, 'MM'), -1), 'MM') FROM dual
		UNION ALL
		SELECT TO_CHAR(ADD_MONTHS(TRUNC(sysdate, 'MM'), 0), 'MM') FROM dual
	</select>
	
	<!-- 통계 - 일일 신규 회원 -->
	<select id="getDailyNewUser" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM user_ WHERE TO_DATE(user_join_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-6
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE TO_DATE(user_join_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-5
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE TO_DATE(user_join_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-4
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE TO_DATE(user_join_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-3
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE TO_DATE(user_join_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-2
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE TO_DATE(user_join_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-1
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE TO_DATE(user_join_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')
	</select>

	<!-- 통계 - 일일 탈퇴 회원 -->
	<select id="getDailyWithdrawalUser" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM delete_account WHERE TO_DATE(delete_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-6
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE TO_DATE(delete_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-5
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE TO_DATE(delete_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-4
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE TO_DATE(delete_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-3
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE TO_DATE(delete_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-2
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE TO_DATE(delete_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-1
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE TO_DATE(delete_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')
	</select>
	
	<!-- 통계 - 일일 방문자수 -->
	<select id="getDailyVisit" resultType="java.lang.Integer">
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE TO_DATE(cud_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-6
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE TO_DATE(cud_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-5
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE TO_DATE(cud_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-4
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE TO_DATE(cud_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-3
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE TO_DATE(cud_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-2
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE TO_DATE(cud_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-1
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE TO_DATE(cud_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')
	</select>
	
	<!-- 통계 - 주별 신규 회원 -->
	<select id="getWeeklyNewUser" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM user_ WHERE user_join_date BETWEEN sysdate-28 AND sysdate-22
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE user_join_date BETWEEN sysdate-21 AND sysdate-15
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE user_join_date BETWEEN sysdate-14 AND sysdate-7
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE user_join_date BETWEEN sysdate-6 AND sysdate
	</select>
	
	<!-- 통계 - 주별 탈퇴 회원 -->
	<select id="getWeeklyWithdrawalUser" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM delete_account WHERE delete_date BETWEEN sysdate-28 AND sysdate-22
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE delete_date BETWEEN sysdate-21 AND sysdate-15
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE delete_date BETWEEN sysdate-14 AND sysdate-7
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE delete_date BETWEEN sysdate-6 AND sysdate
	</select>
	
	<!-- 통계 - 주별 방문자수 -->
	<select id="getWeeklyVisit" resultType="java.lang.Integer">
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE cud_date BETWEEN sysdate-28 AND sysdate-22
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE cud_date BETWEEN sysdate-21 AND sysdate-15
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE cud_date BETWEEN sysdate-14 AND sysdate-7
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE cud_date BETWEEN sysdate-6 AND sysdate
	</select>
	
	<!-- 통계 - 월별 신규 회원 -->
	<select id="getMonthlyNewUser" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM user_ WHERE SUBSTR(user_join_date,4,2) = TO_CHAR(add_months(sysdate,-3), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE SUBSTR(user_join_date,4,2) = TO_CHAR(add_months(sysdate,-2), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE SUBSTR(user_join_date,4,2) = TO_CHAR(add_months(sysdate,-1), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM user_ WHERE SUBSTR(user_join_date,4,2) = TO_CHAR(add_months(sysdate,0), 'MM')
	</select>
	
	<!-- 통계 - 월별 탈퇴 회원 -->
	<select id="getMonthlyWithdrawalUser" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM delete_account WHERE SUBSTR(delete_date,4,2) = TO_CHAR(add_months(sysdate,-3), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE SUBSTR(delete_date,4,2) = TO_CHAR(add_months(sysdate,-2), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE SUBSTR(delete_date,4,2) = TO_CHAR(add_months(sysdate,-1), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM delete_account WHERE SUBSTR(delete_date,4,2) = TO_CHAR(add_months(sysdate,0), 'MM')
	</select>
	
	<!-- 통계 - 월별 방문자수 -->
	<select id="getMonthlyVisit" resultType="java.lang.Integer">
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE SUBSTR(cud_date,4,2) = TO_CHAR(add_months(sysdate,-3), 'MM')
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE SUBSTR(cud_date,4,2) = TO_CHAR(add_months(sysdate,-2), 'MM')
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE SUBSTR(cud_date,4,2) = TO_CHAR(add_months(sysdate,-1), 'MM')
		UNION ALL
		SELECT NVL(SUM(cud_count),0) FROM count_user_date WHERE SUBSTR(cud_date,4,2) = TO_CHAR(add_months(sysdate,0), 'MM')
	</select>
	
	<!-- 통계 - 일일 장터 게시글 수 -->
	<select id="getDailySaleList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM board WHERE TO_DATE(board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-6
		UNION ALL
		SELECT COUNT(*) FROM board WHERE TO_DATE(board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-5
		UNION ALL
		SELECT COUNT(*) FROM board WHERE TO_DATE(board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-4
		UNION ALL
		SELECT COUNT(*) FROM board WHERE TO_DATE(board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-3
		UNION ALL
		SELECT COUNT(*) FROM board WHERE TO_DATE(board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-2
		UNION ALL
		SELECT COUNT(*) FROM board WHERE TO_DATE(board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-1
		UNION ALL
		SELECT COUNT(*) FROM board WHERE TO_DATE(board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')
	</select>
	
	<!-- 통계 - 일일 커뮤니티 게시글 수 -->
	<select id="getDailyCommunityList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM community_board WHERE TO_DATE(c_board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-6
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE TO_DATE(c_board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-5
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE TO_DATE(c_board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-4
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE TO_DATE(c_board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-3
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE TO_DATE(c_board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-2
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE TO_DATE(c_board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-1
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE TO_DATE(c_board_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')
	</select>
	
	<!-- 통계 - 주별 장터 게시글 수 -->
	<select id="getWeeklySaleList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM board WHERE board_date BETWEEN sysdate-28 AND sysdate-22
		UNION ALL
		SELECT COUNT(*) FROM board WHERE board_date BETWEEN sysdate-21 AND sysdate-15
		UNION ALL
		SELECT COUNT(*) FROM board WHERE board_date BETWEEN sysdate-14 AND sysdate-7
		UNION ALL
		SELECT COUNT(*) FROM board WHERE board_date BETWEEN sysdate-6 AND sysdate
	</select>
	
	<!-- 통계 - 주별 커뮤니티 게시글 수 -->
	<select id="getWeeklyCommunityList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM community_board WHERE c_board_date BETWEEN sysdate-28 AND sysdate-22
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE c_board_date BETWEEN sysdate-21 AND sysdate-15
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE c_board_date BETWEEN sysdate-14 AND sysdate-7
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE c_board_date BETWEEN sysdate-6 AND sysdate
	</select>
	
	<!-- 통계 - 월별 장터 게시글 수 -->
	<select id="getMonthlySaleList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM board WHERE SUBSTR(board_date,4,2) = TO_CHAR(add_months(sysdate,-3), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM board WHERE SUBSTR(board_date,4,2) = TO_CHAR(add_months(sysdate,-2), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM board WHERE SUBSTR(board_date,4,2) = TO_CHAR(add_months(sysdate,-1), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM board WHERE SUBSTR(board_date,4,2) = TO_CHAR(add_months(sysdate,0), 'MM')
	</select>
	
	<!-- 통계 - 월별 커뮤니티 게시글 수 -->
	<select id="getMonthlyCommunityList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM community_board WHERE SUBSTR(c_board_date,4,2) = TO_CHAR(add_months(sysdate,-3), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE SUBSTR(c_board_date,4,2) = TO_CHAR(add_months(sysdate,-2), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE SUBSTR(c_board_date,4,2) = TO_CHAR(add_months(sysdate,-1), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM community_board WHERE SUBSTR(c_board_date,4,2) = TO_CHAR(add_months(sysdate,0), 'MM')
	</select>

	<!-- 통계 - 일일 게시글 신고 수 -->
	<select id="getDailyBoardNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_board WHERE TO_DATE(n_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-6
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE TO_DATE(n_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-5
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE TO_DATE(n_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-4
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE TO_DATE(n_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-3
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE TO_DATE(n_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-2
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE TO_DATE(n_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-1
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE TO_DATE(n_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')
	</select>
	
	<!-- 통계 - 일일 댓글 신고 수 -->
	<select id="getDailyCmtNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_cmt WHERE TO_DATE(nc_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-6
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE TO_DATE(nc_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-5
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE TO_DATE(nc_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-4
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE TO_DATE(nc_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-3
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE TO_DATE(nc_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-2
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE TO_DATE(nc_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-1
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE TO_DATE(nc_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')
	</select>
	
	<!-- 통계 - 일일 리뷰 신고 수 -->
	<select id="getDailyReviewNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_review WHERE TO_DATE(nr_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-6
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE TO_DATE(nr_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-5
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE TO_DATE(nr_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-4
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE TO_DATE(nr_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-3
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE TO_DATE(nr_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-2
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE TO_DATE(nr_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')-1
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE TO_DATE(nr_notify_date, 'YYYY-MM-DD') = TO_DATE(sysdate, 'YYYY-MM-DD')
	</select>
	
	<!-- 통계 - 주별 게시글 신고 수 -->
	<select id="getWeeklyBoardNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_board WHERE n_notify_date BETWEEN sysdate-28 AND sysdate-22
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE n_notify_date BETWEEN sysdate-21 AND sysdate-15
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE n_notify_date BETWEEN sysdate-14 AND sysdate-7
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE n_notify_date BETWEEN sysdate-6 AND sysdate
	</select>
	
	<!-- 통계 - 주별 댓글 신고 수 -->
	<select id="getWeeklyCmtNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_cmt WHERE nc_notify_date BETWEEN sysdate-28 AND sysdate-22
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE nc_notify_date BETWEEN sysdate-21 AND sysdate-15
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE nc_notify_date BETWEEN sysdate-14 AND sysdate-7
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE nc_notify_date BETWEEN sysdate-6 AND sysdate
	</select>
	
	<!-- 통계 - 주별 리뷰 신고 수 -->
	<select id="getWeeklyReviewNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_review WHERE nr_notify_date BETWEEN sysdate-28 AND sysdate-22
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE nr_notify_date BETWEEN sysdate-21 AND sysdate-15
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE nr_notify_date BETWEEN sysdate-14 AND sysdate-7
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE nr_notify_date BETWEEN sysdate-6 AND sysdate
	</select>
	
	<!-- 통계 - 월별 게시글 신고 수 -->
	<select id="getMonthlyBoardNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_board WHERE SUBSTR(n_notify_date,4,2) = TO_CHAR(add_months(sysdate,-3), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE SUBSTR(n_notify_date,4,2) = TO_CHAR(add_months(sysdate,-2), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE SUBSTR(n_notify_date,4,2) = TO_CHAR(add_months(sysdate,-1), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_board WHERE SUBSTR(n_notify_date,4,2) = TO_CHAR(add_months(sysdate,0), 'MM')
	</select>
	
	<!-- 통계 - 월별 댓글 신고 수 -->
	<select id="getMonthlyCmtNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_cmt WHERE SUBSTR(nc_notify_date,4,2) = TO_CHAR(add_months(sysdate,-3), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE SUBSTR(nc_notify_date,4,2) = TO_CHAR(add_months(sysdate,-2), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE SUBSTR(nc_notify_date,4,2) = TO_CHAR(add_months(sysdate,-1), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_cmt WHERE SUBSTR(nc_notify_date,4,2) = TO_CHAR(add_months(sysdate,0), 'MM')
	</select>
	
	<!-- 통계 - 월별 리뷰 신고 수 -->
	<select id="getMonthlyReviewNotifyList" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM notification_review WHERE SUBSTR(nr_notify_date,4,2) = TO_CHAR(add_months(sysdate,-3), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE SUBSTR(nr_notify_date,4,2) = TO_CHAR(add_months(sysdate,-2), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE SUBSTR(nr_notify_date,4,2) = TO_CHAR(add_months(sysdate,-1), 'MM')
		UNION ALL
		SELECT COUNT(*) FROM notification_review WHERE SUBSTR(nr_notify_date,4,2) = TO_CHAR(add_months(sysdate,0), 'MM')
	</select>
	
	<!-- 신고 관리 - 게시글 신고 리스트-->
	<select id="getBoardNotifyList" resultType="com.second.space.admin.model.NotifyDTO">
		WITH nb1(n_id, reported, n_notify_date, user_id, board_id, c_board_id, n_content, n_handling) AS
		(SELECT
		    n_id, login_id, n_notify_date, b.user_id, b.board_id, nb.c_board_id, nb.n_content, nb.n_handling
		FROM
		    notification_board nb, board b, user_ u, login_id_list lil
		WHERE
		    nb.board_id = b.board_id AND b.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		UNION ALL
		SELECT
		    n_id, login_id, n_notify_date, cb.user_id, nb.board_id, cb.c_board_id, nb.n_content, nb.n_handling
		FROM
		    notification_board nb, community_board cb, user_ u, login_id_list lil
		WHERE
		    nb.c_board_id = cb.c_board_id AND cb.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		),
		nb2(dump2, reporter) AS
		(SELECT
		    n_id, login_id
		FROM
		    notification_board nb, user_ u, login_id_list lil
		WHERE
		    nb.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		),
		nb3(dump3, nfc_name) AS
		(SELECT
		    n_id, nfc_name
		FROM
		    notification_board nb, notification_category nc
		WHERE
		    nb.nfc_id = nc.nfc_id
		),
		nb4(dump4, user_reported) AS
		(SELECT
		    n_id, u.user_reported
		FROM
		    notification_board nb, board b, user_ u
		WHERE
		    nb.board_id = b.board_id AND b.user_id = u.user_id
		UNION ALL
		SELECT
		    n_id, u.user_reported
		FROM
		    notification_board nb, community_board cb, user_ u
		WHERE
		    nb.c_board_id = cb.c_board_id AND cb.user_id = u.user_id
		)
		SELECT
		    rn, n_id, reported, n_notify_date, user_id, board_id, c_board_id, n_content, n_handling, reporter, nfc_name, user_reported
		FROM(
		    SELECT
		        ROWNUM rn, n_id, reported, n_notify_date, user_id, board_id, c_board_id, n_content, n_handling, reporter, nfc_name, user_reported
		    FROM(
		        SELECT 
		            nb1.n_id, nb1.reported, nb1.n_notify_date, nb1.user_id, nb1.board_id, nb1.c_board_id, nb1.n_content, nb1.n_handling, nb2.reporter, nb3.nfc_name, nb4.user_reported
		        FROM
		          nb1, nb2, nb3, nb4
		        WHERE
		            nb1.n_id = nb2.dump2 AND nb2.dump2 = nb3.dump3 AND nb3.dump3 = nb4.dump4
		        ORDER BY
		            nb1.n_notify_date DESC
		    )
		)
		<![CDATA[
        WHERE
        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
    	]]>
        	 <if test="keyword != null">
                <include refid="notifySearch"></include> 
            </if>
	</select>
	
	<!-- 신고 관리 - 게시글 신고 갯수-->
	<select id="getBoardNotifyCount" resultType="int">
		WITH nb1(n_id, reported, n_notify_date, user_id, board_id, c_board_id, n_content, n_handling) AS
		(SELECT
		    n_id, login_id, n_notify_date, b.user_id, b.board_id, nb.c_board_id, nb.n_content, nb.n_handling
		FROM
		    notification_board nb, board b, user_ u, login_id_list lil
		WHERE
		    nb.board_id = b.board_id AND b.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		UNION ALL
		SELECT
		    n_id, login_id, n_notify_date, cb.user_id, nb.board_id, cb.c_board_id, nb.n_content, nb.n_handling
		FROM
		    notification_board nb, community_board cb, user_ u, login_id_list lil
		WHERE
		    nb.c_board_id = cb.c_board_id AND cb.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		),
		nb2(dump2, reporter) AS
		(SELECT
		    n_id, login_id
		FROM
		    notification_board nb, user_ u, login_id_list lil
		WHERE
		    nb.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		),
		nb3(dump3, nfc_name) AS
		(SELECT
		    n_id, nfc_name
		FROM
		    notification_board nb, notification_category nc
		WHERE
		    nb.nfc_id = nc.nfc_id
		),
		nb4(dump4, user_reported) AS
		(SELECT
		    n_id, u.user_reported
		FROM
		    notification_board nb, board b, user_ u
		WHERE
		    nb.board_id = b.board_id AND b.user_id = u.user_id
		UNION ALL
		SELECT
		    n_id, u.user_reported
		FROM
		    notification_board nb, community_board cb, user_ u
		WHERE
		    nb.c_board_id = cb.c_board_id AND cb.user_id = u.user_id
		)
		SELECT 
		    COUNT(*)
		FROM
		  nb1, nb2, nb3, nb4
		WHERE
		    nb1.n_id = nb2.dump2 AND nb2.dump2 = nb3.dump3 AND nb3.dump3 = nb4.dump4
		    <if test="keyword != null">
                <include refid="notifySearch"></include> 
            </if>
	</select>
	
	<!-- 신고 관리 - 게시글 신고 승인, 반려 처리 -->
	<update id="updateBoardHandling">
		UPDATE notification_board SET n_handling = #{n_handling} WHERE n_id = #{n_id}
	</update>

	<!-- 신고 관리 - 게시글 신고 승인 처리 -->
	<update id="updateReported">
		UPDATE user_ SET user_reported = user_reported + 1 WHERE user_id = #{user_id}
	</update>
	
	<!-- 신고 관리 - 장터 게시글 신고 승인 처리 -->
	<update id="updateBoardDelete">
		UPDATE board SET board_delete = #{n_handling} WHERE board_id = #{board_id}
	</update>
	
	<!-- 신고 관리 - 커뮤니티 게시글 신고 승인 처리 -->
	<update id="updateCommunityBoardDelete">
		UPDATE community_board SET c_board_delete = #{n_handling} WHERE c_board_id = #{c_board_id}
	</update>
	
	<!-- 신고 관리 - 게시글 신고 승인 취소 처리 -->
	<update id="updateCancelReported">
		UPDATE user_ SET user_reported = user_reported - 1 WHERE user_id = #{user_id}
	</update>
	
	<!-- 신고 관리 - 댓글 신고 승인, 반려 처리 -->
	<update id="updateCmtHandling">
		UPDATE notification_cmt SET nc_handling = #{nc_handling} WHERE nc_id = #{nc_id}
	</update>
	
	<!-- 신고 관리 - 댓글 신고 승인 처리 -->
	<update id="updateCmtDelete">
		UPDATE community_comment SET c_delete = #{nc_handling} WHERE c_id = #{c_id}
	</update>
	
	<!-- 신고 관리 - 리뷰 신고 승인, 반려 처리 -->
	<update id="updateReviewHandling">
		UPDATE notification_review SET nr_handling = #{nr_handling} WHERE nr_id = #{nr_id}
	</update>
	
	<!-- 신고 관리 - 리뷰 신고 승인 처리 -->
	<update id="updateReviewDelete">
		UPDATE review SET r_delete = #{nr_handling} WHERE review_id = #{review_id}
	</update>
	
	<!-- 신고 관리 - 댓글 신고 리스트-->
	<select id="getCmtNotifyList" resultType="com.second.space.admin.model.NotifyDTO">
		WITH nb1(nc_id, reported, nc_notify_date, user_id, c_board_id, nc_content, nc_handling, c_id) AS
		(SELECT
		    nc_id, login_id, nc_notify_date, comm.user_id, cb.c_board_id, nc.nc_content, nc.nc_handling, nc.c_id 
		FROM
		    notification_cmt nc, community_board cb, user_ u, login_id_list lil, community_comment comm
		WHERE
		    nc.c_board_id = cb.c_board_id AND nc.c_id = comm.c_id AND comm.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		),
		nb2(dump2, reporter) AS
		(SELECT
		    nc_id, login_id
		FROM
		   notification_cmt nc, community_board cb, user_ u, login_id_list lil
		WHERE
		    nc.user_id = u.user_id AND u.user_login_id = lil.user_login_id AND nc.c_board_id = cb.c_board_id
		),
		nb3(dump3, nfc_name) AS
		(SELECT
		    nc_id, nfc_name
		FROM
		    notification_cmt nc, notification_category ncc, community_comment comm
		WHERE
		    nc.nfc_id = ncc.nfc_id AND nc.c_id = comm.c_id
		),
		nb4(dump4, user_reported) AS
		(SELECT
		    nc_id, u.user_reported
		FROM
		    notification_cmt nc, community_board cb, user_ u, community_comment comm
		WHERE
		    nc.c_board_id = cb.c_board_id AND comm.user_id = u.user_id AND nc.c_id = comm.c_id
		)
		SELECT
		    rn, nc_id, reported, nc_notify_date, user_id, c_board_id, nc_content, nc_handling, c_id, reporter, nfc_name, user_reported
		FROM(
		    SELECT
		        ROWNUM rn, nc_id, reported, nc_notify_date, user_id, c_board_id, nc_content, nc_handling, c_id, reporter, nfc_name, user_reported
		    FROM(
		        SELECT 
		            nb1.nc_id, nb1.reported, nb1.nc_notify_date, nb1.user_id, nb1.c_board_id, nb1.nc_content, nb1.nc_handling, nb1.c_id, nb2.reporter, nb3.nfc_name, nb4.user_reported
		        FROM
		          nb1, nb2, nb3, nb4
		        WHERE
		            nb1.nc_id = nb2.dump2 AND nb2.dump2 = nb3.dump3 AND nb3.dump3 = nb4.dump4
		        ORDER BY
		            nb1.nc_notify_date DESC
		    )
		)
		<![CDATA[
        WHERE
        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
    	]]>
        	 <if test="keyword != null">
                <include refid="notifySearch"></include> 
            </if>
	</select>
	
	<!-- 신고 관리 - 댓글 신고 갯수-->
	<select id="getCmtNotifyCount" resultType="int">
		WITH nb1(nc_id, reported, nc_notify_date, user_id, c_board_id, nc_content, nc_handling, c_id) AS
		(SELECT
		    nc_id, login_id, nc_notify_date, comm.user_id, cb.c_board_id, nc.nc_content, nc.nc_handling, nc.c_id 
		FROM
		    notification_cmt nc, community_board cb, user_ u, login_id_list lil, community_comment comm
		WHERE
		    nc.c_board_id = cb.c_board_id AND nc.c_id = comm.c_id AND comm.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		),
		nb2(dump2, reporter) AS
		(SELECT
		    nc_id, login_id
		FROM
		   notification_cmt nc, community_board cb, user_ u, login_id_list lil
		WHERE
		    nc.user_id = u.user_id AND u.user_login_id = lil.user_login_id AND nc.c_board_id = cb.c_board_id
		),
		nb3(dump3, nfc_name) AS
		(SELECT
		    nc_id, nfc_name
		FROM
		    notification_cmt nc, notification_category ncc, community_comment comm
		WHERE
		    nc.nfc_id = ncc.nfc_id AND nc.c_id = comm.c_id
		),
		nb4(dump4, user_reported) AS
		(SELECT
		    nc_id, u.user_reported
		FROM
		    notification_cmt nc, community_board cb, user_ u, community_comment comm
		WHERE
		    nc.c_board_id = cb.c_board_id AND comm.user_id = u.user_id AND nc.c_id = comm.c_id
		)
		SELECT 
		    COUNT(*)
		FROM
		  nb1, nb2, nb3, nb4
		WHERE
		    nb1.nc_id = nb2.dump2 AND nb2.dump2 = nb3.dump3 AND nb3.dump3 = nb4.dump4
        	 <if test="keyword != null">
                <include refid="notifySearch"></include> 
            </if>
	</select>
	
	<!-- 신고 관리 - 리뷰 신고 리스트 -->
	<select id="getReviewNotifyList" resultType="com.second.space.admin.model.NotifyDTO">
		WITH nb1(nr_id, reported, nr_notify_date, user_id, review_id, nr_content, nr_handling, board_id) AS
		(SELECT
		    nr_id, login_id, nr_notify_date, r.user_id, nr.review_id, nr_content, nr_handling, r.board_id
		FROM
		    notification_review nr, board b, user_ u, login_id_list lil, review r
		WHERE
		    r.board_id = b.board_id AND r.user_id = u.user_id AND u.user_login_id = lil.user_login_id AND nr.review_id = r.review_id
		),
		nb2(dump2, reporter) AS
		(SELECT
		    nr_id, login_id
		FROM
		   notification_review nr, user_ u, login_id_list lil
		WHERE
		    nr.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		),
		nb3(dump3, nfc_name) AS
		(SELECT
		    nr_id, nfc_name
		FROM
		    notification_review nr, notification_category ncc
		WHERE
		    nr.nfc_id = ncc.nfc_id
		),
		nb4(dump4, user_reported) AS
		(SELECT
		    nr_id, u.user_reported
		FROM
		    notification_review nr, review r, user_ u
		WHERE
		    nr.review_id = r.review_id AND r.user_id = u.user_id
		)
		SELECT
		    rn, nr_id, reported, nr_notify_date, user_id, review_id, nr_content, nr_handling, board_id, reporter, nfc_name, user_reported
		FROM(
		    SELECT
		        ROWNUM rn, nr_id, reported, nr_notify_date, user_id, review_id, nr_content, nr_handling, board_id, reporter, nfc_name, user_reported
		    FROM(
		        SELECT 
		            nb1.nr_id, nb1.reported, nb1.nr_notify_date, nb1.user_id, nb1.review_id, nb1.nr_content, nb1.nr_handling, nb1.board_id, nb2.reporter, nb3.nfc_name, nb4.user_reported
		        FROM
		          nb1, nb2, nb3, nb4
		        WHERE
		            nb1.nr_id = nb2.dump2 AND nb2.dump2 = nb3.dump3 AND nb3.dump3 = nb4.dump4
		        ORDER BY
		            nb1.nr_notify_date DESC
		    )
		)
		<![CDATA[
        WHERE
        	rn > (#{pageNum}-1) * #{amount} AND rn <= #{pageNum} * #{amount}
    	]]>
        	 <if test="keyword != null">
                <include refid="notifySearch"></include> 
            </if>
	</select>
	
	<!-- 신고 관리 - 리뷰 신고 리스트 갯수 -->
	<select id="getReviewNotifyCount" resultType="int">
		WITH nb1(nr_id, reported, nr_notify_date, user_id, review_id, nr_content, nr_handling, board_id) AS
		(SELECT
		    nr_id, login_id, nr_notify_date, r.user_id, nr.review_id, nr_content, nr_handling, r.board_id
		FROM
		    notification_review nr, board b, user_ u, login_id_list lil, review r
		WHERE
		    r.board_id = b.board_id AND r.user_id = u.user_id AND u.user_login_id = lil.user_login_id AND nr.review_id = r.review_id
		),
		nb2(dump2, reporter) AS
		(SELECT
		    nr_id, login_id
		FROM
		   notification_review nr, user_ u, login_id_list lil
		WHERE
		    nr.user_id = u.user_id AND u.user_login_id = lil.user_login_id
		),
		nb3(dump3, nfc_name) AS
		(SELECT
		    nr_id, nfc_name
		FROM
		    notification_review nr, notification_category ncc
		WHERE
		    nr.nfc_id = ncc.nfc_id
		),
		nb4(dump4, user_reported) AS
		(SELECT
		    nr_id, u.user_reported
		FROM
		    notification_review nr, review r, user_ u
		WHERE
		    nr.review_id = r.review_id AND r.user_id = u.user_id
		)
		SELECT 
		    COUNT(*)
		FROM
		  nb1, nb2, nb3, nb4
		WHERE
		    nb1.nr_id = nb2.dump2 AND nb2.dump2 = nb3.dump3 AND nb3.dump3 = nb4.dump4
        	 <if test="keyword != null">
                <include refid="notifySearch"></include> 
            </if>
	</select>
</mapper>










